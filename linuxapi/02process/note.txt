
进程： 正在运行的程序
一个程序可以运行多次，所以一个程序可以有多个进程，每个进程都是独立的，而且进程都是并发运行的 
但一个进程只能对应一个程序

在系统里可用ps命令查看进程的状况：

///进程的状态(通过man ps)
       D    Uninterruptible sleep (usually IO)
       R    Running or runnable (on run queue)
       S    Interruptible sleep (waiting for an event to
            complete)
       T    Stopped, either by a job control signal or because
            it is being traced.
       X    dead (should never be seen)
       Z    Defunct ("zombie") process, terminated but not
            reaped by its parent.

       <    high-priority (not nice to other users)
       N    low-priority (nice to other users)
       L    has pages locked into memory (for real-time and
            custom IO)
       s    is a session leader
       l    is multi-threaded (using CLONE_THREAD, like NPTL
            pthreads do)
       +    is in the foreground process group


进程调度：根据调度算法分配时间片给所有进程运行

调度的方式： 抢占式 
	   非抢占式
调度的算法： 1.先到先服务
	   2.短进程优先
	   3.按进程的优先级别
	   4.按分时间片轮流运行

进程的状态:    
	 就绪   -->>   运行 -->>    等待    -->> 就绪
	  分配到时间片  时间片完或等数据输入    等待完成   

查看系统中的进程: ps -auxf
		  ps jaxkuid,-ppid 可查看进程的父子，组关系


每个进程都会拥有一个唯一的id号, 也就是PID
父子进程：
	假设A进程调用了B程序, 产生了B进程,
那么对于B进程来说A进程就是它的父进程, 对A进程来说B进程就是它的子进程

1. getpid(), 得到当前进程的pid号
   getppid(), 得到当前进程的父进程pid号

2. nice(val), 设置当前进程的优先级别(-20 -- 19), 默认级别为0, -20为最高, 19最低
   setprioity(which, who, val); 
	当which为：PRIO_PROCESS, who为要设优先级别的进程号, val为优先级别数
	当为: PRIO_PGRP, who为要设的进程组的id号
	当为: PRIO_USER, who为要设的user id

3. fork() 创建一个子进程
	等于把父进程完整的复制一份副本，而这个副本就成为了子进程, 包括父进程里的变量，函数，文件描述符等，在子进程里同样具有
	子进程创建出来后，它从fork()函数后开始运行的，而不是从main函数,在子进程里得到fork()的返回值是0, 父进程得到子进程的pid号 

4. 僵尸进程： 当子进程已退出， 父进程还在运行时，则子进程变成了僵尸进程，直到被父进程收尸或父进程退出
	pid_t wait(int *status); 用于收尸
	调用此函数时会堵塞当前进程的运行，直到有子进程结束为止，函数返回值为结束的子进程的pid号
	 WIFEXITED(status)用于检查是否正常退出 exit, _exit,return等主动退出的都是正常退出，如被kill则是非正常退出
	WEXITSTATUS(status)得到子进程的返回值
	
	如要等待指定的子进程退出时可用waitpid函数


5.exit // return // _exit都是正常结束进程
	exit//return结束时会关闭打开的文件描述符，处理缓冲区的数据
	_exit不会处理缓冲区的数据

6. int atexit(void (*func)(void));
	注册一个函数在进程正常退出时自动运行，可用于处理退出前的工作


7. 孤儿进程: 当父进程退出后，而子进程还在运行，则成为孤儿进程,
孤儿进程会被init(systemd)进程(pid=1)接管，所以孤儿进程的ppid=1,当孤儿进程结束运行时，init进程会收它的尸


8. vfork() 同fork()函数功能一样, 但在复制父进程时,不会完整的复制. 适用于创建一个子进程后,马上使用exec*函数调用其它程序.
	vfork会堵塞会父进程的执行, 直到子进程执行完毕.


9. demon守护进程, 也就是在后台运行的进程
	创建步骤: 1.先创建出一个孤儿进程
		 2. setsid(), 让此进程成为进程组的组长并关闭终端
		 3.关闭标准输出，标准错误输出
		 4. 把当前的工作目录改变到"/"

10. exec调用程序
       int execl(const char *path, const char *arg, ...);
       int execlp(const char *file, const char *arg, ...);
       int execle(const char *path, const char *arg,
                  ..., char * const envp[]);
       int execv(const char *path, char *const argv[]);
       int execvp(const char *file, char *const argv[]);
       int execve(const char *filename, char *const argv[], char *const envp[]);
	以上函数execve才是真正的系统调用函数
	注意最后一个参数必须是NULL
	
	"l"字母表示参数是单个的参数
	"v"字母表示参数是数组形式的
	有"p"字母的表示要调用的程序在PATH环境变量里查找,
没有"p"字母的要给绝对路径
	有"e"字母的表示可指定什么环境变量给要调用的程序,没有"e"字母的表示让要调要的程序继承当前进程的环境变量


11. 环境变量的值
	在shell上env可查看当前系统的环境变量
	子进程默认会继承父进程里的环境变量,在子进程里改变环境变量不会影响父进程
	

	 extern char **environ; 获取系统的环境变量
	 getenv(char *name) 获取指定名字的环境变量值, 找不到返回NULL
	 setenv(char *name, char *val, int overwrite) 设置环境变量的值
	如果指定的变量名已存在而且overwrite不为0，则改定变量的值	       如果指定的变量名已存在而且overwrite为0，则不改定变量的值	

	












