《函数》

1.函数就是C语言模块化的体现，一般把一个功能模块封装成一个独立的函数，这样便于扩展和修改
2.C语言由一个主函数和若干子函数组成，从主函数开始执行，主函数调用子函数，子函数可以相互调用，但了函数不能调用主函数（main函数）；
3.所有函数之间是平行的，即在定义函数时是分别进行的，是相互独立的。一个函数并不从属于别一个函数，即函数不能嵌套定义。

＝＝＝＝＝＝＝函数的分类＝＝＝＝＝＝＝
返回值 函数名 形参列表（如果没有形参，建议加void）
int    func  (int a,void c);

从用户角度看：
(1).标准函数即库函数；
(2).自定义的函数。

从函数的形式看：
(1).无参函数；
  其定义的一般形式为：
  类型标识符  函数名（void）
  {
      ......;
  }

(2).有参函数。
  其定义的一般形式为：
  类型标识符  函数名（形式参数列表）
  {
      ......;
  }

4.空函数：
  类型说明符  函数名（）
  {

  }

/*空函数调用时什么也不做，没有任何实际意义，它纯粹是为了占一个位置，为方便以后程序功能扩充*/

函数的定义：函数的定义就是函数体的实现；
==========================================================

5.函数的参数：（形参与实参）
******参数之间用“,”（逗号）隔开**********

   /*主调函数和被调函数之间有数据传递关系，即有参函数*/
（1）.在定义函数时的参数列里的参数 我们称“形式参数”（简称“形参”）；

   /*形参在未出现函数调用时，它们并不占内存中的存储单元。只有在调用时形参才被分配内存空间，调用结束后，所占内存空间也被释放*/
（2）.在主调函数调用一个函数时，函数名后面括号中的参数 我们称为“实际参数”（简称“实参”）；
   /*实参可以是常量，变量或表达式 ： max(3,a+b)*/
   /*在被定义的函数中，必须指定形参的类型*/
   /*实参与形参的类型应相同或赋值兼容*/

=====================================================
6.在C语言中，实参向形参的数据传递是"值传递"，单向传递。
  注：传参过程中，与形参名无关，只与位置有关(一一对映的关系);

====================================================

7.函数的返回值：
  函数返回值，先求值再返回，如果类型不匹配为首选隐式类型转换
  函数的返回值是通过return 语句得到的，return x == return (x); return 后可以跟一个表达式；

注：如果带返回值的函数忘了写return 会从栈桢中拿一个随机值返回

8.函数返回值的类型：
  return 表达式的结果的类型应与函数的返回值类型一致。
  void 为没有返回值的函数，这时函数里可以有return 但return后面不能再跟值或表达式
======================================================

9.函数的调用方式：（按函数在程序中出现的位置来分）
（1）.函数语句
   func();
 (2).函数表达式
   save = 2*max(a,b);
 (3).函数参数
   max(a,max());

10.用库函数时必须要带头文件，用自定义的函数之前必须声名；
/**
**函数声名时可以只写参数类型而不写形参名，因为编译器只作参数个数，
**类型检查，不检查参数名
**/
int func(int, float); 
****声名后面的“;”切不可少，因为声名为一条声名语句****
int func(int x,float y);

/**
***函数声名是为了让编译器检查返回值与我们传参时参数类型及个数的检查
**/

int main()
{
  ......;
  func(a,b);
}
func()
{

}


===============================================
练习：
1.求一个无符号整数有效bit位数，并进行奇偶校验
================================================

11.数组传参：
当数组名作为参数传参时，相当于传了一个指向这个数组首地址的指针；

一维数组传参
{
  int arry[10];
  ......;
  func(arry);
}
void func(int *p);
void func(int p[]);

二维数组传参
{
    int arry[2][10];
    .....;
    func(arry);
}
void func(int (*p)[10]);
void func(p[][10]);

/**erorr**/   ===>void func(int **p); 此时会报指针类型不兼容之类的错误。

====================================================
12.函数的递归调用：
 1.递归首先应该要有一个可结束的条件
 2.牢记函数的调用过程,无论怎么调用,都要建立新的栈桢,每个函数的栈桢私有
 3.函数在哪里调在哪里返回
======================================================

13.函数的调用过程:
    0）. 新建一个栈祯
    1）. 保存函数的返回地址
    2）. 准备函数的入口参数   (将实参复制一份)

    3）. 跳转到函数体开始执行
    4）. 函数体执行完 or 执行到 return 语句

    5）. 准备返回值
    6）. 从栈祯中取出返回地址
    7）. 销毁栈祯
    8）. 跳转到返回地址开始执行

========================================================
14.变量存储：

 变量的类型    |      生存周期    |      可见范围        |
_______________+__________________+______________________+
  全局变量            进程               定义开始往下
_______________+__________________+______________________+
  局部变量            函数             定义开始整个函数
_______________+__________________+______________________+
  静态变量            进程             定义开始整个函数
_______________+__________________+______________________+

1.代码块作用域
2.函数作用域
3.文件作用

当两个符号的可见范围有重叠时，按 局部优先法则 只有一个符号生效

注：
1.静态的局部变量在data段　进程生命周期　初始语句只会执行一次
2.外部变量可以多次声名，链接的是同一个实体，只能定义一次

========================================================

auto   static   register

auto          栈
static        数据段
register      寄存器

extern    变量声明

volatile  易失变量 告诉编译器对该变量的访问不能进行优化

15.const:
  const 只读

  const int *p   // p 指针 指向的地方不能改变
  int const *p   // 同上
  int * const p  // p 指针不能改变 只能在定义时进行初始化


homework:  1 1 2 3 5 8
1.分别用循环和递归实现契那菲波数列（比较两种算法的优劣） 
2.把10进制的数转换成2/8/16进制输出
3.一个猴子偷了一堆桃，每天吃桃的一半加一个，5天吃完，求总数;

*4. 10个小孩围成一圈分糖果，老师顺次分给每个人的糖块数为12，2，8，22，16，4，10，6，14，20。然后按下列规则调整，所有小孩子同时把自己的糖果分一半给右边的小孩子，糖块数变为奇数的人，再向老师补要一块，问经过多少次调整后，大家的糖块一样多，且每个人多少块


*5.如果有一个正数从左，右来读都是一样的，则称为回文数（简称回数）；比如101，32123，999都是回数。数学中有名的“回数猜想”之迷，至今未解决。
回数猜想： 任取一个数，再把它倒过来，并把两个数相加，然后把这个和数再倒过来，与原和数相加，重复此过程，一定能获得一个回数
例：
	68 倒过来86
	68 ＋ 86 ＝ 154
	154 ＋ 451 ＝ 605
	605 ＋ 506 ＝ 1111（回数）
编程，输入任意整数，按上述方法产生一个回数，为简便起见，最多计算7步，看是否能得到一个回数。
要求：输出每一步计算步骤
子函数1，计算该倒数的倒数
子函数2，验证和是否为回数


6.递归算  回文数  水仙花数  
