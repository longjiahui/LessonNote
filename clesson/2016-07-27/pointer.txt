
                    《指针》

识别标识符类型的方法：
1.以标识为起点,先右后左,碰到"()"掉头
2.所有路径只走一次

指针变量的概念： 用于存储变量的地址的变量叫指针变量。(区分指针和指针变量)
指针:地址也称之为指针
指针:是一个无符号整数（unsigned long），它是一个以当前系统寻址范围为取值范围的整数。32位系统下寻址能力（地址空间）是4G-byte（0~2^32-1）二进制表示长度为32bit（也就是4B）

注意：尽管一个字包含了4个字节，但它们仍然只有一个地址，至于它的地址是它最左边那个字节的位置还是它最右边那个字节的位置，不同的机器有不同的规定。另一个需要注意的硬件事项是边界对齐。在要求边界对齐的机器，整型存储的起始位置只能是某些特定的字节，通常是2或4的整数倍。这些一般很少影响我们C程序员。我们关心的只有以下两点：

1.内存中每一个位置由一个独一无二的地址标识；
2.内存中的每一个位置包含一个值。

地址与内容：
  地址对映内容，指针变量名字与内存之间的关联并不是硬件提供的，它是由编译器为我们实现；

值和类型：
  《C和指针》 P92页写得非常贴切；

指针变量的内容：
   指针变量的声名：指向整型的指针 int *p, 指向浮点型的指针 float *p,
指向字符型的指针  char *ch .....
   指针的初始化： 指针的初始化是通&符来完成的。"&"用于产生操作数的内存地址。
   "&"运算符结合律从右至左，它只能应用于内存中的对象（变量与数组元数），它不能对表
   达式，常量和寄存器变量进行操作。
   如：int *p = &a 或 int *p; p = &a; 或 p = NULL;

间接访问：通过一个指针访问一个它所指向的地址的过程称为间接访问（indirection）或
解引用指针（dereferencing the pointer）。间接访问的操作符是单目运算符 “*“

未初始化的指针和非法指针：
  int  *p;
  ......;
  *p = 100; 这个声名创建了一个名叫p的指针变量，并把100存储在p所指向的内存位置。
   这一切看起来好像都没有错，其实这里的P指针从未对它进行初始化，它所指向的地址是
   不可预测的，这样运气好的话可能发生段错识，运气不好会发生非常危险的动作（修改他人的值）。

   这样看来指针变量和其它变量并无区别，如果是静态变量会初始化成0，自动变量不初始化

NULL指针：
  标准定义了NULL指针，它作为一个特殊的指针变量，表示不指向任何内存地址。但它自身还是分配内存空间的。
  对一个NULL指针解引用的错误是未定义的，不同的平台有不同错误结果。但不管怎么样我们都不应该访问一个零地址。

指针 间接访问和左值：
  int a;
  int *p = &a;

  *p = 20 - *p;
   p = 20 - *p; .....????(非法操作，一个整数赋值给一个指针变量)

指针常量：
  假设已知变量a的地址是0x100;如果要把25赋值给a....>  *0x100 = 25 (非法的)应该 *（int *）0x100 = 25;

指针的指针：
  int a = 5;
  int *b = &a;
  int c = &b; <==> int **c = &b; c就是一个指针的指针。

指针的运算： 
 指针可以进行加减运算,除了进行加减运算之外还可进行其它运算,但并不多；

 指针加上一个整数的结果是另一个指针；
 当一个指针和一个整数执行算术运算时，在执行加法运算前始终会根据合适的大小进行调
整。“合适的大小”就是指指针所指向的类型的大小，“调整“就是把整数和”合适的大小“相乘。
如： int *p;  p ＋ 3 就是加三个整数大小的长度。4＊3； char *ch; ch + 3 就是
加三个字符的长度；

指针的算术运算有两种形式：
  第一种形式：指针 ＋ 整数 或 指针 － 整数；
  如：int arry[5],int *p = &arry[0];p + 1 这时相当于加一个数组元素的长度。

  第二种形式：指针 － 指针；
  只有当两个指针都指向同一个数组元素时，才允许从一个指针减去另一个指针。
  如：p1指向arry[i],p2指向arry[j],那么p2-p1的值就是j-i的值。
  假如有个float数组，它们每一个元素在内存中占四个字节大小，如果数组的起始地址是
  1000，p1的值是1004，p2的值是1024，但表达式p2-p1的值是5；因为两个指针的差值
  20将要除以每一个元素的大小（4）。这种差值的调整使指针的运算结果与数据类型无关。


homewok:
1.给定一个数组，只打印出重复的元素 a[8]={1,1,2,3,2,5,1,3} ==>1 2 3
2.只用一个循环找出数组的第二大元素

3.做一个架构，当某个键时把一个数组进循环左移/右移/翻转
如：ar[5]={1,2,3,4,5}
1 2 3 4 5
a <<==
2 3 4 5 1
d ===>
1 2 3 4 5
s 翻转
5 4 3 2 1


