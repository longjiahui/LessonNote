
哈夫曼编码： 
	"AAAAAAAAAAAAABBBBBBBBBBBBCCCCCDDDDEEEFF"
A: 13;   B:12;   C:5;  D:4;  E:3;  F:2

需要39个字节, 每个字符占用8位. 如果每个字符可用二，三位表示出来，则可以节约存储空间

如:  A: 01(二进制)
     B: 011
     C: 010
     D: 0111
     E: 0101
     F: 01111

哈夫曼编码原理：
 根据每个字符的使用频率来确定编码， 从最小的频率开始生成一棵二叉树。
 权重： 在这里就是每个字符的使用频率
A: 13;   B:12;   C:5;  D:4;  E:3;  F:2
	  Head
	/     \
    A(13)    H4(26)	    
	   /      \	    
	B(12)	 H3(14)	
	      /         \	
	    C(5)       H2(9)
		   /           \	
		 D(4)  	     H1(5)
			  /       \	
			F(2)     E(3)

f: tmp ,   E:new    H1:new_head

tmp = H1,  new:D    new_head:H2
生成的二叉树，使用频率越高的字符节点离根节点就越近。它的编码就会越短
字符的编码生成就是根据这个二叉树来确定的。
从根节点开始，往左走表示相应位的数据为'0', 往右走表示相应位的数据为'1'

A: 0
B: 10
C: 110
D: 1110
F: 11110
E: 11111
	10 0 110 0 101101110111111110
        B  A  C  A

作业：
	1. 统计文件字符使用频率，并排序。文件里的字符个数不要太多
	2. 生成相应的二叉树
	3. 根据生成的二叉树再生成一个字符的编码表
	4. 根据编码表来进行编码




