
二叉树：  基于链表来实现的，每个节点都有两个指针变量(left / right), 用于记录左右节点的地址

小于节点的数存放在节点的左指针指向的节点里， 大于节点的数存放在节点的右指针指向的节点里

 如：   18   44    56   32   29  16  36

	      a.44(head)
 	      /        \       
   	   b.18            c.56
         /    \           /   \
	f.16   d.32      
	/ \    /    \
	      e.29    h.36
	      /  \    /  \

前序遍历：  44 18 16 32 29 36 56    // 头节点--> 左节点 --> 右节点 //按顺序输出

中序遍历：  16 18 29 32 36 44 56    // 左节点--> 头节点 --> 右节点

后序遍历：  16 29 36 32 18 56 44    // 左节点--> 右节点 --> 头节点

//注意：需要把二叉树看成多个子树组成



1. 删除二叉树的一个节点

2. 统计二叉树的节点个数



平衡二叉树： 左右分支的节点数相差最多为1
满二叉树：   除了最底层的节点(叶子), 每个节点都带左右节点

//////////////////////////

	               A
		     /    \
	           B       C
		/    \     /   \
	    D        E     F     G
	/     \
	H     I

1. A入队列

2. 出队列，取出A， 把B， C入队

3. 出队，取出B， 把D, E入队.  队列里： C <-- D <-- E

4. 出队，取出C, 把F, G入队,  队列里:  D <-- E <-- F <-- G
 
作业：用队列把二叉树的节点遍历













